#!/usr/bin/python3
# coding: utf-8
"""

 Jade   - Just Another Desktop Environment
 Author - Copyright (c) 2017 Vitor Lopes
 url    - https://github.com/codesardine/Jadesktop

"""

try:
    from j.AK import Api, AppWindow

except Exception as err:
    print("Ops something went wrong: " + str(err))

import os
import pwd
import subprocess
import webbrowser

import gi
import xdg.DesktopEntry
import xdg.Menu

from gi.repository import Gtk, WebKit2, Gio
from functools import lru_cache as cache


user_name = pwd.getpwuid(os.getuid())[4].replace(",", " ")
if user_name == "" and os.path.exists("/usr/bin/calamares"):
    user_name = "Manjaro WebDad"

path = os.path.dirname(os.path.realpath(__file__))
userFolder = os.path.expanduser("~")
cssOverridePath = userFolder + "/.config/jade/theme/override.css"


def get_disk_usage():
    """

    :return: total disk usage in percentage
    """
    contents = []
    get_disk_usage = os.popen('df --total')  # TODO this works but needs a fix i don't like having to use a list.
    for entry in get_disk_usage:
        if entry.startswith("total"):
            contents.append(entry)
            percentage = contents[0].split("%")[0].strip().split(" ")[-1].strip() + "%"
            return percentage


def fetch_icon(icon_name):
    """

    :param icon_name:
    :return: icon name and path
    """
    icon_not_found = "image-missing"
    icon_theme = Gtk.IconTheme.get_default()

    if icon_name.endswith((".png", ".svg")):

        if icon_name.startswith("/"):
            return icon_name  # if image has full icon path we just return them.

        # if image has icon name and extension, but no path, lets fix that.
        else:
            if icon_name.endswith(".png"):
                icon_name = icon_name.replace('.png', '')

            elif icon_name.endswith(".svg"):
                icon_name = icon_name.replace('.svg', '')

    # xpm not supported by webkit don't load.
    elif icon_name.endswith(".xpm"):
        icon_name = icon_not_found
        print(icon_name + " xpm icons not supported")

    check_icon = icon_theme.has_icon(icon_name)

    if check_icon:
        pass

    else:
        # check if it has the icon in pixmaps directory and return it.
        pixmaps = "/usr/share/pixmaps/" + icon_name
        if os.path.isfile(pixmaps + ".png"):
            return pixmaps + ".png"

        elif os.path.isfile(pixmaps + ".svg"):
            return pixmaps + ".svg"

        else:
            print("Icon Not found in this theme --> " + icon_name)
            icon_name = icon_not_found

    icon_theme = icon_theme.lookup_icon(icon_name, 64, 0)
    icon_path = icon_theme.get_filename()

    return icon_path


#  icon names
if os.path.exists("/etc/webdad/webdad-release"):
    terminal_icon = fetch_icon("hyper")
else:
    terminal_icon = fetch_icon("terminal")

# dashboard_icon             = fetch_icon("back")
file_manager_icon = fetch_icon("folder")
browser_icon = fetch_icon("browser")
software_installer_icon = fetch_icon("system-software-install")
settings_icon = fetch_icon("preferences-desktop")
user_icon = fetch_icon("system-users")
logout_icon = fetch_icon("system-log-out")
shutdown_icon = fetch_icon("system-shutdown")
reboot_icon = fetch_icon("system-reboot")
hibernate_icon = fetch_icon("system-hibernate")
suspend_icon = fetch_icon("system-suspend")
sleep_icon = fetch_icon("system-hibernate")
search_icon = fetch_icon("search")
internet_icon = browser_icon
about_jade_icon = fetch_icon("dialog-information")

html_file = path + '/theme/jade.html'
ui_html_contents = str(Api.Fs.open_file(html_file) % locals())

Api.html = ui_html_contents
Api.html += "<div id='search-icon'><img src='%(search_icon)s'><a href='#' id='clear-search'>Clear Search</a></div>" % locals()


def jade_build_menu(application_category, iteration=0):
    """

    :param application_category:
    :param iteration:
    """
    category_name = application_category.getName()
    category = category_name.lower().replace(" ", "-")
    category_icon_name = application_category.getIcon()
    category_description = application_category.getComment()

    if iteration == 0:
        Api.html += '''<span id='%(category_name)s'><a>%(category_name)s</a><img src="img/back.svg" class="applications-arrow-highlight"></span>''' % locals()

    else:

        category_icon = fetch_icon(category_icon_name)

        Api.html += '''<div id='%(category)s-msg' class='category-msg'>
                          <h5><span>%(category)s</span><span>%(category_description)s</span></h5>
                          <img class='category-icon %(category_name)s' src='%(category_icon)s'>
                          </div>
                          <div id='%(category)s' class='category-container row'><div id='%(category)s-favorites' class='row favorites'></div><div class="grid row">''' % locals()

        tag = "li"
        action = "onmouseover"
        if category_name == "Settings" or category_name == "System" or category_name == "Help":
            tag = "div"
            action = "onclick"

        Api.html += "<" + tag + " class='application-category " + category + "'><a href='#' " + action + '''=\"
                        display('#%(category)s, #%(category)s-msg');
                        \">%(category_name)s
                        </a></''' % locals() + tag + ">"

    iteration += 1
    for entry in application_category.getEntries():
        if isinstance(entry, xdg.Menu.Menu):
            jade_build_menu(entry, iteration)

        elif isinstance(entry, xdg.Menu.MenuEntry):
            terminal = entry.DesktopEntry.getTerminal()

            if terminal == "true":
                pass

            else:
                application_executable = entry.DesktopEntry.getExec()
                application_icon = entry.DesktopEntry.getIcon()
                application_icon = fetch_icon(application_icon)
                application_executable = application_executable.split('%')[0].strip()

                application_generic_name = entry.DesktopEntry.getGenericName()
                application_name = entry.DesktopEntry.getName().replace(")", "").replace("(", "").replace("/", " ")

                application_comment = entry.DesktopEntry.getComment()
                application_keywords = entry.DesktopEntry.getKeywords()

                application_keywords = " ".join(application_keywords)
                application_keywords = "<span style='display:none;'>" + application_keywords + "</span>"

                Api.html += '''<div class='application-wrapper'>
                                  <a class='application-box' href = 'shell:%(application_executable)s'>
                                  <img class='application-icon' src='%(application_icon)s'>
                                  <h5 class='application-name card'>%(application_name)s</h5>
                                  ''' % locals()

                br = "<br><br>"
                if not application_comment and not application_generic_name:
                    application_comment = "Description not available."
                    br = ""

                # fix duplicate descriptions
                elif application_comment == application_generic_name:
                    application_generic_name = ""
                    br = ""

                Api.html += '''<p class='application-comment'>
                                    %(application_generic_name)s
                                    <br><br>
                                    %(application_comment)s
                                    </p>%(application_keywords)s
                                    </a></div>''' % locals()

    Api.html += "</div></div>"


def jade_menu():  # /etc/xdg/menus
    """
    parses the menu file
    """
    applications_menu = xdg.Menu.parse('/etc/xdg/menus/jade-applications.menu')
    jade_build_menu(applications_menu)


class JadeWindow(AppWindow):
    """
    extends AK.AppWindow functionality
    """

    def __init__(self):

        super(JadeWindow, self).__init__()

        @cache(maxsize=None)
        def on_decide_policy(webview, decision, decision_type):

            """

            :param webview:
            :param decision:
            :param decision_type:
            :return: if is not a predicted action do nothing.
            """

            def execute(command):

                """

                :param command: shell command to execute.
                :return: we are not loading a url don't follow link or we get a blank page.
                """
                process = subprocess.Popen(command, shell=True)
                decision.ignore()
                return True

            if decision_type == WebKit2.PolicyDecisionType.NAVIGATION_ACTION:

                navigation_action = decision.get_navigation_action()
                navigation_request = navigation_action.get_request()
                navigation_type = navigation_action.get_navigation_type()
                url = navigation_request.get_uri()

                if url.startswith("file://") and url.endswith("/jade/"):
                    pass

                elif url.startswith("shell:"):
                    command = url.replace('shell:', '').replace("%20", " ")
                    print("exec: " + command)
                    execute(command)

                elif navigation_type == WebKit2.NavigationType.LINK_CLICKED:
                    print("Link Clicked")
                    print(url + " <- Action Denied Repeated URL")
                    decision.ignore()
                    return True

                elif navigation_type == WebKit2.NavigationType.OTHER:
                    print("Unknown Navigation Request " + url)

                else:
                    print(url + " <- Action Denied")
                    decision.ignore()
                    return True

            return False

        def on_title_changed(webview, title):

            """

            :param webview:
            :param title:
            """
            title_name = webview.get_title()

            if title_name.startswith("disk-usage"):
                percentage = get_disk_usage()
                self.webview.run_javascript('$(".disk-percentage").text("' + percentage + '");getDiskColors();')

        def on_load_changed(webview, event):
            if event == WebKit2.LoadEvent.STARTED:
                print("redirect")

        self.webview.connect("notify::title", on_title_changed)
        self.webview.connect("decide-policy", on_decide_policy)
        self.webview.connect("load-changed", on_load_changed)


if os.path.exists(cssOverridePath):
    Api.html += "<script>themeOverride('%s');</script></body></html>" % cssOverridePath
    print('override.css found')

else:
    Api.html += "</body></html>"

jade_menu()
JadeWindow()
Gtk.main()
